{"version":3,"file":"CircleChart-167b5171.js","sources":["../../src/components/reusable/assets/charts/circleChart/Progress.jsx","../../src/components/reusable/assets/charts/circleChart/CircleChart.jsx"],"sourcesContent":["import React from 'react';\r\nimport styles from './progress.module.css';\r\n\r\nfunction useAnimateValue(value, duration) {\r\n    const [current, setCurrent] = React.useState(value);\r\n    React.useLayoutEffect(() => {\r\n        const stepDuration = 1 / 50;\r\n        const totalSteps = duration / stepDuration;\r\n        const stepSize = (value - current) / totalSteps;\r\n        let currentStep = 0;\r\n        const interval = setInterval(() => setCurrent(current => {\r\n            currentStep++;\r\n\r\n            if (currentStep >= totalSteps) {\r\n                clearInterval(interval);\r\n                return value;\r\n            }\r\n\r\n            return current + stepSize;\r\n        }), stepDuration * 1000);\r\n        return () => clearInterval(interval);\r\n    }, [value, duration]);\r\n    return current;\r\n}\r\n\r\nconst AnimatePercentage = /*#__PURE__*/React.memo(({\r\n                                                       value,\r\n                                                       duration\r\n                                                   }) => {\r\n    const v = useAnimateValue(value, duration);\r\n    return Math.round(v * 100) / 100;\r\n});\r\n\r\nfunction _Progress({\r\n                       progress = 0,\r\n                       strokeWidth = 4,\r\n                       ballStrokeWidth = 16,\r\n                       reduction = 0.25,\r\n                       transitionDuration = 0.5,\r\n                       transitionTimingFunction = 'ease',\r\n                       background = '#F5EEFE',\r\n                       hideBall = false,\r\n                       hideValue = false,\r\n                       gradient = [{\r\n                           stop: 0.0,\r\n                           color: '#00bc9b'\r\n                       }, {\r\n                           stop: 1,\r\n                           color: '#5eaefd'\r\n                       }],\r\n                       subtitle = \"\",\r\n                       style,\r\n                       className,\r\n                       size,\r\n                       sizeDifference = 0\r\n                   }) {\r\n    progress = Math.round(progress * 100) / 100;\r\n    const width = size;\r\n    const center = width / 2;\r\n    const height = size || center + center * Math.cos(reduction * Math.PI);\r\n    const [unique] = React.useState(() => Math.random().toString());\r\n    const rotate = 270 + 180 * reduction;\r\n    const r = center - strokeWidth / 2 - ballStrokeWidth / 2;\r\n    const circumference = Math.PI * r * 2;\r\n    const offset = circumference * (100 - progress * (1 - reduction)) / 100;\r\n    return /*#__PURE__*/React.createElement(\"div\", {\r\n        className: `${className} ${styles.progress}`,\r\n        style: style\r\n    }, /*#__PURE__*/React.createElement(\"svg\", {\r\n        viewBox: `0 0 ${width} ${height}`,\r\n        className: styles.svg\r\n    }, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\r\n        id: \"gradient\" + unique,\r\n        x1: \"0%\",\r\n        y1: \"0%\",\r\n        x2: \"0%\",\r\n        y2: \"100%\"\r\n    }, gradient.map(({\r\n                         stop,\r\n                         color\r\n                     }) => /*#__PURE__*/React.createElement(\"stop\", {\r\n        key: stop,\r\n        offset: stop * 100 + \"%\",\r\n        stopColor: color\r\n    })))), !hideValue && /*#__PURE__*/React.createElement(\"text\", {\r\n        x: center,\r\n        y: center,\r\n        textAnchor: \"middle\",\r\n        fontSize: \"30\",\r\n        fill: \"#3c3c3c\"\r\n    }, progress, \"%\"), /*#__PURE__*/React.createElement(\"text\", {\r\n        x: center,\r\n        y: center + 30 * 3 / 4,\r\n        textAnchor: \"middle\",\r\n        fill: \"#9c9c9c\"\r\n    }, subtitle), /*#__PURE__*/React.createElement(\"circle\", {\r\n        transform: `rotate(${rotate} ${center} ${center})`,\r\n        id: \"path\",\r\n        cx: center,\r\n        cy: center,\r\n        r: r,\r\n        strokeWidth: strokeWidth - sizeDifference,\r\n        strokeDasharray: circumference,\r\n        strokeDashoffset: circumference * reduction,\r\n        fill: \"none\",\r\n        stroke: background,\r\n        strokeLinecap: \"round\"\r\n    }), /*#__PURE__*/React.createElement(\"circle\", {\r\n        style: {\r\n            transition: `stroke-dashoffset ${transitionDuration}s ${transitionTimingFunction}`\r\n        },\r\n        transform: `rotate(${rotate} ${center} ${center})`,\r\n        id: \"path\",\r\n        cx: center,\r\n        cy: center,\r\n        r: r,\r\n        strokeWidth: strokeWidth,\r\n        strokeDasharray: `${circumference}`,\r\n        strokeDashoffset: offset,\r\n        fill: \"none\",\r\n        stroke: `url(#gradient${unique})`,\r\n        strokeLinecap: \"round\"\r\n    }), !hideBall && /*#__PURE__*/React.createElement(\"circle\", {\r\n        style: {\r\n            transition: `stroke-dashoffset ${transitionDuration}s ${transitionTimingFunction}`\r\n        },\r\n        transform: `rotate(${rotate} ${center} ${center})`,\r\n        id: \"path\",\r\n        cx: center,\r\n        cy: center,\r\n        r: r,\r\n        strokeWidth: ballStrokeWidth,\r\n        strokeDasharray: `1 ${circumference}`,\r\n        strokeDashoffset: offset,\r\n        fill: \"none\",\r\n        stroke: `url(#gradient${unique})`,\r\n        strokeLinecap: \"round\"\r\n    })));\r\n}\r\n\r\nexport const Progress = /*#__PURE__*/React.memo(_Progress);\r\nProgress.displayName = \"Progress\";\r\nexport default Progress;","import React, {useEffect, useRef, useState} from 'react';\r\nimport styles from './circle-chart.module.scss';\r\nimport Progress from './Progress.jsx';\r\nimport Avatar from \"../../avatar/Avatar.jsx\";\r\n\r\nconst CircleChart = ({progress, withAvatar = true}) => {\r\n  const [progressProps, setProgressProps] = useState({\r\n    strokeWidth: 5,\r\n    size: 48,\r\n    sizeDifference: 1,\r\n  });\r\n  const [chartBg, setChartBg] = useState(null);\r\n  const ref = useRef(null);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (withAvatar) {\r\n      setProgressProps({\r\n        strokeWidth: 18,\r\n        size: 145,\r\n        sizeDifference: 5,\r\n      });\r\n    } else {\r\n      setProgressProps({\r\n        strokeWidth: 5,\r\n        size: 48,\r\n        sizeDifference: 1,\r\n      });\r\n    }\r\n  }, [withAvatar]);\r\n\r\n  useEffect(() => {\r\n    setChartBg(window.getComputedStyle(ref.current).getPropertyValue('--chart-bg'));\r\n  });\r\n\r\n  return (\r\n    <div className={styles[\"circle-chart__wrapper\"]} ref={ref}>\r\n      <Progress\r\n        progress={progress}\r\n        hideBall\r\n        hideValue\r\n        reduction={0}\r\n        transitionDuration={3}\r\n        background={chartBg}\r\n        gradient={[{stop: 0.6, color: '#F498E3'}, {stop: 0.8, color: '#EE6CD3'}, {stop: 1, color: '#B0319B'}]}\r\n        {...progressProps}\r\n      />\r\n      {withAvatar && (\r\n        <div className={styles[\"circle-chart__avatar\"]}>\r\n          <Avatar mode={'small'} src={'https://m.media-amazon.com/images/M/MV5BMTM3MzY2MDYwOF5BMl5BanBnXkFtZTcwODQ3MDA0Nw@@._V1_.jpg'}/>\r\n        </div>\r\n      )}\r\n\r\n      <div className={withAvatar ?  styles[\"circle-chart__outer-value\"] : styles[\"circle-chart__inner-value\"]}>\r\n        <div>{progress}%</div>\r\n        <div>Completed</div>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default CircleChart;"],"names":["_Progress","progress","strokeWidth","ballStrokeWidth","reduction","transitionDuration","transitionTimingFunction","background","hideBall","hideValue","gradient","subtitle","style","className","size","sizeDifference","width","center","height","unique","React","rotate","r","circumference","offset","styles","stop","color","Progress","CircleChart","withAvatar","progressProps","setProgressProps","useState","chartBg","setChartBg","ref","useRef","useEffect","jsx","Avatar","jsxs","CircleChart$1"],"mappings":"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"}